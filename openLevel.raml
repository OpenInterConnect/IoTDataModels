#%RAML 0.8
title: OICOpenLevel
version: v1.1.0-20160519
documentation:
  - title: Â© 2016 Open Connectivity Foundation, Inc. All rights reserved.
    content: |
        Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
        1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
        2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

        THIS SOFTWARE IS PROVIDED BY THE Open Connectivity Foundation, INC. "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR WARRANTIES OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE Open Connectivity Foundation, INC. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
schemas:
  - OpenLevel: !include oic.r.openLevel.json

traits:
  - interface:
      queryParameters:
        if:
          enum: ["oic.if.a","oic.if.baseline"]

/OpenLevelResURI:
  description: |
    This resource describes how open or ajar an entity such as a window, door, blind or shutter is.
    The openLevel can be read (acting as a sensor).
    The openLevel can also be set (acting as an actuator).
    The openLevel is device dependent across the range provided.
    When range (from oic.r.baseresource) is omitted then 0 to 100 is assumed where 0 means closed, 100 means fully open.
    If a range is provided then the lower bound=closed, upper bound=open.
    If step (from oic.r.baseresource) is present then it represents the increment between possible values; if not provided 1 is assumed.

  displayName: Open Level
  is: [ interface ] # valid for all methods

  get:
    description: |
      Retrieves the current openLevel.
    responses:
      200:
        body:
          application/json:
            schema: OpenLevel
            example: |
              {
                "rt":         ["oic.r.openlevel"],
                "id":         "unique_example_id",
                "openLevel":  50,
                "step":       2,
                "range":      [0,100]
              }

  post:
    description: |
      Sets the desired openLevel.
    body:
      application/json:
        schema: OpenLevel
        example: |
          {
            "id":         "unique_example_id",
            "openLevel":  0
          }
    responses:
      200:
        body:
          application/json:
            schema: OpenLevel
            example: |
              {
                "id":         "unique_example_id",
                "openLevel":  0
              }

      403:
        description: |
          This response is generated by the OIC Server when the client sends:
            An update with an out of range property value for openLevel.
          The server responds with the current resource representation.
        body:
          application/json:
            schema: OpenLevel
            example: |
              {
                "id":         "unique_example_id",
                "openLevel":  50,
                "step":       2,
                "range":      [0,100]
              }
